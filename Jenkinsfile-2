pipeline {
    agent any

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}:${getDockerPath()}"
    }

    stages {
//         stage ('Sonarcube Scan') {
//         steps {
//          script {
//           scannerHome = tool 'sonarqube'
//         }
//         withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]){
//         withSonarQubeEnv('SonarQubeScanner') {
//           sh " ${scannerHome}/bin/sonar-scanner \
//           -Dsonar.projectKey=CliXX-App   \
//           -Dsonar.login=${SONAR_TOKEN} "
//         }
//         }
//         }

// }

//  stage('Quality Gate') {
//             steps {
//                 timeout(time: 3, unit: 'MINUTES') {
//                     waitForQualityGate abortPipeline: true
//             }
//             }
//         }

//           stage ('Build Docker Image') {
//           steps {
//             // script{
//             //  dockerHome= tool 'docker-inst'
//             // }
//             //  sh "${dockerHome}/bin/docker build . -t clixx-image:$VERSION "
//             sh "docker build . -t clixx-image:$VERSION "
//           }
//         }

//   stage ('Starting Docker Image') {
//           steps {
//               sh '''
//               if ( docker ps|grep clixx-cont ) then
//                  echo "Docker image exists, killing it"
//                  docker stop clixx-cont
//                  docker rm clixx-cont
//                  docker run --name clixx-cont  -p 80:80 -d clixx-image:$VERSION
//               else
//                  docker run --name clixx-cont  -p 80:80 -d clixx-image:$VERSION 
//               fi
//               '''
//           }
//         }

//   stage ('Restore CliXX Database') {
//           steps {
//               sh '''
//             python3 -m venv python3-virtualenv
//             source python3-virtualenv/bin/activate
//             python3 --version
//             pip3 install boto3 botocore boto
//             ansible-playbook $WORKSPACE/deploy_db_ansible/deploy_db.yml
//             deactivate

//               '''
//           }
//         }

  stage ('Configure DB Instance') {
          steps {
            script {
                def userInput = input(id: 'confirm', message: 'Is DB creation complete?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Complete?', name: 'confirm'] ])
             }
              sh '''
               USERNAME='wordpressuser'
               PASSWORD='W3lcome123'
               DBNAME='wordpressdb'
               SERVER_IP=`curl http://169.254.169.254/latest/meta-data/public-ipv4`
               SERVER_INSTANCE='wordpressdbclixxjenkins.cd7numzl1xfe.us-east-1.rds.amazonaws.com'

               mysql -u $USERNAME --password=$PASSWORD -h $SERVER_INSTANCE  -D  $DBNAME <<-_EOF_ 
               UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_value LIKE 'http%';
               _EOF_

              '''
          }
        }


    }
}

def getSonarPath(){
        def SonarHome= tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        return SonarHome
    }
def getDockerPath(){
        def DockerHome= tool name: 'docker-inst', type: 'dockerTool'
        return DockerHome
    }
    
